stages:
  - lint
  - test
  - build

build worker:
  image: harbor.ulbricht.casa/proxy/library/golang:1.21-alpine
  script:
    - apk update
    - apk add make go git gcc libc-dev
    - go build --ldflags '-linkmode external -extldflags "-static"' -o jinya-backup-worker -buildvcs=false .
  stage: build
  artifacts:
    name: jinya-backup-worker
    paths:
      - jinya-backup-worker
  rules:
    - if: $CI_COMMIT_TAG

build container:
  image: harbor.ulbricht.casa/proxy/library/docker:dind
  stage: build
  before_script:
    - docker login -u "$QUAY_USER" -p "$QUAY_PASSWORD" quay.imanuel.dev
    - docker login -u "$DOCKERHUB_USER" -p "$DOCKERHUB_PASSWORD"
  script:
    - docker build --pull -t "quay.imanuel.dev/jinya/jinya-backup:${CI_COMMIT_TAG}" -f ./Dockerfile .
    - docker tag "quay.imanuel.dev/jinya/jinya-backup:${CI_COMMIT_TAG}" "quay.imanuel.dev/jinya/jinya-backup:latest"
    - docker tag "quay.imanuel.dev/jinya/jinya-backup:${CI_COMMIT_TAG}" "jinyacms/jinya-backup:${CI_COMMIT_TAG}"
    - docker tag "quay.imanuel.dev/jinya/jinya-backup:${CI_COMMIT_TAG}" jinyacms/jinya-backup:latest
    - docker push "quay.imanuel.dev/jinya/jinya-backup:${CI_COMMIT_TAG}"
    - docker push "quay.imanuel.dev/jinya/jinya-backup:latest"
    - docker push "jinyacms/jinya-backup:${CI_COMMIT_TAG}"
    - docker push "jinyacms/jinya-backup:latest"
  rules:
    - if: $CI_COMMIT_TAG
      exists:
        - Dockerfile

lint and format:
  image: harbor.ulbricht.casa/proxy/library/golang:1.21-alpine
  stage: lint
  script:
    - go fmt
    - go vet

build always:
  image: harbor.ulbricht.casa/proxy/library/golang:1.21-alpine
  stage: test
  script:
    - apk update
    - apk add make go git gcc libc-dev
    - go build -o jinya-backup
    - go build --ldflags '-linkmode external -extldflags "-static"' -o jinya-backup-worker -buildvcs=false .
