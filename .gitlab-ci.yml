stages:
  - lint
  - test
  - build
  - deploy

build worker:
  image: harbor.ulbricht.casa/proxy/library/golang:1.21-alpine
  script:
    - apk update
    - apk add make go git gcc libc-dev
    - go build --ldflags '-linkmode external -extldflags "-static"' -o jinya-backup-worker -buildvcs=false .
  stage: build
  artifacts:
    name: jinya-backup-worker
    paths:
      - jinya-backup-worker
  rules:
    - if: $CI_COMMIT_TAG

deploy container:
  stage: deploy
  image:
    name: gcr.io/kaniko-project/executor:debug
    pull_policy: always
    entrypoint: [""]
  before_script:
    - echo $KANIKO_DOCKERHUB_AND_HARBOR > /kaniko/.docker/config.json
  script:
    - /kaniko/executor
      --context "${CI_PROJECT_DIR}"
      --dockerfile "${CI_PROJECT_DIR}/Dockerfile"
      --destination "harbor.ulbricht.casa/jinya/jinya-backup:${CI_COMMIT_TAG}"
      --destination "harbor.ulbricht.casa/jinya/jinya-backup:latest"
      --destination "jinyacms/jinya-backup:${CI_COMMIT_TAG}"
      --destination "jinyacms/jinya-backup:latest"
  rules:
    - if: $CI_COMMIT_TAG
      exists:
        - Dockerfile

lint and format:
  image: harbor.ulbricht.casa/proxy/library/golang:1.21-alpine
  stage: lint
  script:
    - go fmt
    - go vet

build always:
  image: harbor.ulbricht.casa/proxy/library/golang:1.21-alpine
  stage: test
  script:
    - apk update
    - apk add make go git gcc libc-dev
    - go build -o jinya-backup
    - go build --ldflags '-linkmode external -extldflags "-static"' -o jinya-backup-worker -buildvcs=false .
